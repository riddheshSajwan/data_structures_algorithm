//#1 - Sort 10 schools around your house by distance: 
Insertion Sort - easy to sort, good for small data, if schools are nearly sorted then time complexity would be O(10) ~ O(1)

//#2 - eBay sorts listings by the current Bid amount:
Radix or Counting Sort - the bids will generally be in a known range of values.

//#3 - Sport scores on ESPN: Quick Sort

//#4 - Massive database (can't fit all into memory) needs to sort through past year's user data:
Merge Sort - we won't be traversing through entire memory, O(nlogn) time in any case, stable sorting. 
Why not quick? - lot of data, can lead to O(n^2) in worst case.
Why not heap? - not stable. Relatively slow as compared to Merge Sort. 

//#5 - Almost sorted Udemy review data needs to update and add 2 new reviews: 
Insertion Sort - almost sorted data means Insertion sort will take O(n)

//#6 - Temperature Records for the past 50 years in Canada: 
Radix or COunting Sort - if the temperature values are integers. 
If not integers then Quick SOrt. 

//#7 - Large user name database needs to be sorted. Data is very random: Quick Sort / Merge Sort. (not enough info though)

//#8 - You want to teach sorting for the first time: Selection Sort / Bubble Sort